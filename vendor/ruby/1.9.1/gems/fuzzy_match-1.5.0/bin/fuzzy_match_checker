#!/usr/bin/env ruby

if File.exist?(File.join(Dir.pwd, 'lib', 'fuzzy_match.rb'))
  $LOAD_PATH.unshift File.join(Dir.pwd, 'lib')
  require File.join(Dir.pwd, 'lib', 'fuzzy_match')
else
  require 'fuzzy_match'
end
require 'fuzzy_match/version'

# note: not included in gemfile but neither is bundler used here
require 'active_support/core_ext'
require 'remote_table'
require 'thor'

class FuzzyMatch
  class Checker < ::Thor
    # for example: https://docs.google.com/spreadsheet/pub?key=0AkCJNpm9Ks6JdHZURUI2S2xOa3ZFVzlZb205VVhpQnc&single=true&gid=0&output=csv
    desc :check, "Check a spreadsheet containing columns with these headers: haystack, needles, correct_matches, groupings, stop_words, identities, normalizers, find_options (listing an option like must_match_grouping makes it true)"
    method_option :show_success, :default => false, :type => :boolean, :desc => "Whether to print successful matches as you go"
    method_option :downcase, :default => false, :type => :boolean, :desc => "Whether to downcase everything (except regexes, where you have to do /foo/i)"
    def check(url)
      puts "Checking matches using fuzzy_match version #{FuzzyMatch::VERSION}..."

      t = RemoteTable.new(url, :headers => :first_row)
      if (violators = %w{needle grouping correct_match stop_word identity normalizer find_option} & t.rows.first.keys).any?
        raise ArgumentError, "Make sure you pluralize your right row headers (violators: #{violators.map(&:inspect).join(', ')}"
      end
      haystack = t.rows.map { |row| row['haystack'] }.select(&:present?)
      haystack.map!(&:downcase) if options.downcase
      find_options = t.rows.map { |row| row['find_options'] }
      fm = FuzzyMatch.new(
        haystack,
        :groupings => t.rows.map { |row| row['groupings'] }.select(&:present?),
        :identities => t.rows.map { |row| row['identities'] }.select(&:present?),
        :stop_words => t.rows.map { |row| row['stop_words'] }.select(&:present?),
        :normalizers => t.rows.map { |row| row['normalizers'] }.select(&:present?),
        :must_match_grouping => find_options.include?('must_match_grouping'),
        :must_match_at_least_one_word => find_options.include?('must_match_at_least_one_word'),
        :first_grouping_decides => find_options.include?('first_grouping_decides')
      )

      count = 0
      t.each do |row|
        needle = row['needles']
        correct_match = row['correct_matches']
        next unless needle.present?
        if options.downcase
          needle.to_s.downcase!
          correct_match.to_s.downcase!
        end
        correct_match = nil if correct_match.blank?
        match = fm.find needle
        if options.show_success? or match != correct_match
          puts "  #{needle.inspect} => #{match.inspect}"
        end
        unless match == correct_match
          puts "MISMATCH: #{needle.inspect} should match #{correct_match.inspect}"
          puts fm.explain needle
          exit 1
        end
        count += 1
      end

      puts "Correctly matched #{count} needles."
      exit 0
    end
  end
end

FuzzyMatch::Checker.start
